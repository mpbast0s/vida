class Canvas {
    linhas = []; // Array para armazenar as linhas desenhadas no canvas

    constructor(canvas, ctx, polysize = 80) {
        // Armazena o elemento canvas e o contexto 2D, além do tamanho dos polígonos
        this.canvas = canvas;
        this.ctx = ctx;
        this.polysize = polysize;
    }

    // Adiciona uma nova linha e retorna seu objeto
    // coord1 e coord2 são objetos com campos x e y
    criaLinha(coord1, coord2) {
        var linha = new Linha(coord1, coord2);
        this.linhas.push(linha);
        return linha;
    }

    // Desenha todas as linhas armazenadas na classe
    desenha() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); // Limpa o canvas
        for (const l of this.linhas) { // Desenha cada linha
            this.ctx.strokeStyle = l.cor; // Define a cor da linha
            this.ctx.stroke(l.path); // Desenha a linha
        }
    }

    // Apaga todo o conteúdo do canvas e zera as linhas
    limpa() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); // Limpa o canvas
        this.linhas.length = 0; // Zera o array de linhas
    }

    // Cria uma nova linha dividindo uma linha existente
    // coord é um objeto com campos x e y e linha uma Linha
    // Retorna a nova linha criada
    divideLinha(coord, linha) {
        var nova_linha = this.criaLinha(coord, linha.coords[1]); // Cria uma nova linha
        linha.atualizaCoords(coord, linha.coords[0]); // Atualiza as coordenadas da linha original
        return nova_linha; // Retorna a nova linha
    }

    // Obtém a linha que está na posição do clique do mouse
    // Caso não seja encontrada nenhuma linha, retorna null
    obtemLinha(mouse_event) {
        for (var l of this.linhas) { // Itera sobre todas as linhas
            if (l.mouseSobrepoe(mouse_event, this.ctx)) { // Verifica se o clique do mouse está sobre a linha
                return l; // Retorna a linha encontrada
            }
        }
        return null; // Retorna null se nenhuma linha for encontrada
    }

    // Define a cor de todas as linhas armazenadas
    atualizaCores(cor) {
        for (var l of this.linhas) { // Itera sobre todas as linhas
            l.cor = cor; // Define a cor da linha
        }
    }

    // Baseado em http://www.scienceprimer.com/drawing-regular-polygons-javascript-canvas
    // Cria as linhas de um polígono com o número dado de lados
    criarPoligono(lados) {
        var sides = parseInt(lados); // Converte o número de lados para inteiro
        if (sides < 3 || sides > 8) // Verifica se o número de lados está dentro do intervalo válido
            return; // Retorna se o número de lados não for válido
        // Posições centrais do canvas
        const posX = parseInt(this.canvas.width / 2);
        const posY = parseInt(this.canvas.height / 2);

        for (let i = 0; i < sides; i++) { // Loop para criar as linhas do polígono
            let coord1 = {
                x: posX + this.polysize * Math.cos(i * 2 * Math.PI / sides),
                y: posY + this.polysize * Math.sin(i * 2 * Math.PI / sides),
            };
            let coord2 = {
                x: posX + this.polysize * Math.cos((i + 1) * 2 * Math.PI / sides),
                y: posY + this.polysize * Math.sin((i + 1) * 2 * Math.PI / sides),
            };
            this.criaLinha(coord1, coord2); // Cria uma linha do polígono
        }
        this.desenha(this.canvas, this.ctx); // Desenha o polígono
    }
}
